/**
 * 剑指offer面试题9：斐波那切数列。
 * 定义一个函数，输入 n，求菲波那切数列的第 n 项
 * 菲波那切数列的定义如下：
 *
 *        0               n=0
 * f(n) = 1               n=1
 *        f(n-1) + f(n-2) n>1
 *
 */

/**
 * 直观做法是根据定义写出公式
 */
function Fibonacci(n) {
  if (n == 0) {
    return 0;
  }
  if (n == 1) {
    return 1;
  }
  return Fibonacci(n - 1) + Fibonacci(n - 2);
}

/**
 * 上面方法是很经典的一个递归，但是用来解决这个问题会有很严重的效率问题。
 * 因为每一个数字都依赖于前两个数据，用树表示出来会发现有很多重复结点，
 * 而重复结点数会随着 n 增大急剧增大。时间复杂度是以 n 的指数方式递增的。
 *
 * 如下实用解法：从下往上算
 */
function Fibonacci2(n) {
  let arrT = [0, 1];
  if (n < 2) {
    return arrT[n];
  }
  let one = 1;
  let two = 0;
  let next = 0;
  for (let i = 2; i <= n; i++) {
    next = one + two;
    two = one;
    one = next;
  }
  return next;
}

/**
 * 时间复杂度为 O(logn) 但不够实用的方法。
 * 依赖于 矩阵乘方的数学公式。
 */

/**
 * 拓展题：一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。
 * 求该青蛙跳上 n 级台阶有多少种跳法。
 * 
 * 分析：如果只有一阶台阶，那只有一种方法。
 * 如果有两阶台阶，则有两种方法（一阶一阶跳，或者直接跳两阶）
 * 如果把跳 n 阶台阶的方法记做 f(n), 则
 *  先跳一阶，剩下的则有 f(n-1)中方法，先跳两阶，则剩下的有 f(n-2) 种方法
 * 所以 f(n) = f(n-1) + f(n-2)  也就是菲波那切数列，
 * 更多扩展可查看本书 76 页
 */


