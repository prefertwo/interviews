/**
 * 几个例子：
 * 0.1 + 0.2 === 0.3 ?
 * (0.335).toFixed(2) === 0.34 ?
 * 9999999999999999 === 10000000000000001 ?
 * 9007199254740992 + 1 === 9007199254740992 ?
 * 
 */

/**
 * 计算机中存储数据是二进制，只能模仿十进制的四舍五入，于是 0 舍，1 入。因此计算机种部分浮点数运算时会出现误差，丢失精度。
 * 大数精度丢失也是类似原因。js 采用双精度。占用 64 位，1位用来表示符号位，11位用来表示指数，52位用来表示尾数。因此，大数的安全范围就是 2^53 === 9007199254740992。超过这个数字就会有丢书精度的问题。
 * 
 */

/**
 * 解决方案：
 * 对于整数，很少有超过最大安全数值的情况。即使有，现在也已经有了大数的表示方式。
 * 参考：https://www.cnblogs.com/xguoz/p/13377587.html
 * 
 * 对于小数，可以用 (num * 10)/10 这种方式来确保准确。前提是 num * (10|100|1000) 不能超过最大安全数值。
 *  
 */